#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$* TEMPLATES $*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
templates:

### DELUGE BTN #########################################################

  deluge_connect:
    deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      addpaused: yes

  deluge_connect_movies:
    deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      keep_container: no
      container_directory: '{{movie_name}}'
      rename_main_file_only: yes
      addpaused: yes

  download_priorities:
    # if aria2 fails, don't update deluge (higher number tasks run first)
    plugin_priority:
      from_deluge: 136
      aria2: 137

  cleanup_priorities:
    # if aria2 fails, don't update deluge (higher number tasks run first)
    plugin_priority:
      from_deluge: 136
      aria2: 137

  prowl_master:
    # ping my iPhone when certain events occur (start leeching, start downloading)
    prowl:
      apikey: 1234567891234567891234567891234567891234
      application: Flexget
      event: '{{event}}'
      description: '{% if pre_desc %}{{pre_desc}} - {% endif %}{% if series_name %}{{series_name}}{% if series_id %} - {{series_id}}{% endif %}{% elif movie_name %}{{movie_name}} ({{year}}){% elif title %}{{title}}{% endif %}'


#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$* TASKS $*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
tasks:

########################################################################
################### TV/BTN #############################################
########################################################################

### BTN RSS ############################################################
  rss_btn_my-shows:
    # my list of active shows
    include:
      - shows.yml
      - includes/btn_rss_720p-mkv.yml
    template:
      - deluge_connect
      - prowl_master
    set:
      # these are used in the prowl_master template in the event and description fields, respectively
      event: RSS to Deluge
      pre_desc: 'Now leeching: BTN (my shows)'
      # deluge fields
      path: /media/sdh1/home/tubedogg/tor/1/btn
      movedone: /media/sdh1/home/tubedogg/tor/2/btn
      label: btn-1
      content_filename: '{{series_name}} - {{series_id|lower}}'

  rss_btn_other-shows:
    # misc shows not on my main list, but that I want to catch
    include:
      - misc-shows.yml
      - includes/btn_rss_720p-mkv.yml
    template:
      - deluge_connect
      - prowl_master
    set:
      event: RSS to deluge
      pre_desc: 'Now leeching: BTN (other shows)'
      path: /media/sdh1/home/tubedogg/tor/1/btn
      movedone: /media/sdh1/home/tubedogg/tor/2/btn
      label: btn-1
      content_filename: '{{series_name}} - {{series_id|lower}}'

  rss_btn_my-premieres:
    # premieres I am waiting for, based on my Trakt list premieres,
    # matching against the BTN MKV 720p feed
    include:
      - includes/trakt_premieres.yml
      - includes/btn_rss_720p-mkv.yml
    template:
      - deluge_connect
      - prowl_master
    set:
      event: RSS to Deluge
      pre_desc: 'Now leeching: BTN (my premieres)'
      path: /media/sdh1/home/tubedogg/tor/1/btn-prem
      movedone: /media/sdh1/home/tubedogg/tor/2/btn-prem
      label: btn-prem-1
      content_filename: '{{series_name}} - {{series_id|lower}}'
    # if I used series_premiere: yes here, it would match every S01E01
    # in the feed and wouldn't even check against my list...bug or
    # feature? instead, check for S01E01 manually
    if:
      - series_id != "S01E01": reject

  rss_btn_all-premieres:
    # all premieres that come across, except for certain categories/
    # networks, matching against the BTN MKV 720p feed
    include:
      - includes/btn_rss_720p-mkv.yml
    template:
      - deluge_connect
      - prowl_master
    set:
      event: RSS to Deluge
      pre_desc: 'Now leeching: BTN (all premieres)'
      path: /media/sdh1/home/tubedogg/tor/1/btn-prem
      movedone: /media/sdh1/home/tubedogg/tor/2/btn-prem
      label: btn-prem-1
      content_filename: '{{series_name}} - {{series_id|lower}}'
    # here I can use series_premiere because I do want everything, and
    # i'm filtering the output from there
    series_premiere:
      allow_teasers: no
    thetvdb_lookup: yes
    # if these fields aren't present, reject, because i can't filter for
    # them
    require_field:
      - tvdb_genres
      - tvdb_first_air_date
    if:
      # if it didn't first air in the last 60 days it's not actually new
      - tvdb_first_air_date != None and tvdb_first_air_date < now - timedelta(days=60): reject
    regexp:
      reject:
        - talk show: {from: tvdb_genres}
        - game show: {from: tvdb_genres}
        - reality: {from: tvdb_genres}
        - children: {from: tvdb_genres}
        - hallmark channel: {from: tvdb_network}
        # ^ *shudders*
        - bravo: {from: tvdb_network}
        - lifetime( movie)?: {from: tvdb_network}


### BTN TORRENT WATCHDIR ###############################################

  # easy way to upload torrents I manually download, from specific
  # folders, and still get all the magic benefits of flexget
  watchdir_btn-eps:
    template:
      - deluge_connect
      - prowl_master
    set:
      event: Watch to Deluge
      pre_desc: 'Now leeching: BTN (eps)'
      path: /media/sdh1/home/tubedogg/tor/1/btn
      movedone: /media/sdh1/home/tubedogg/tor/2/btn
      label: btn-1
      content_filename: '{{series_name}} - {{series_id|lower}}'
    no_entries_ok: yes
    find:
      path: "/Users/tubedogg/Torrents/btn"
      mask: '*.torrent'
    all_series: yes
    # this fails every time. do not know why.
    #move:
    #  to: "/Users/tubedogg/Torrents/_done"

  watchdir_btn-seasons:
    template:
      - deluge_connect
      - prowl_master
    set:
      event: Watch to Deluge
      pre_desc: 'Now leeching: BTN (seasons)'
      path: /media/sdh1/home/tubedogg/tor/1/btn
      movedone: /media/sdh1/home/tubedogg/tor/2/btn
      label: btn-1
      content_filename: '{{series_name}} - {{series_id|lower}}'
    no_entries_ok: yes
    find:
      path: "/Users/tubedogg/Torrents/btn"
      mask: '*.torrent'
    accept_all: yes
    #move:
    #  to: "/Users/tubedogg/Torrents/_done"

  watchdir_btn-prem:
    template:
      - deluge_connect
      - prowl_master
    set:
      event: Watch to Deluge
      pre_desc: 'Now leeching: BTN (premieres)'
      path: /media/sdh1/home/tubedogg/tor/1/btn-prem
      movedone: /media/sdh1/home/tubedogg/tor/2/btn-prem
      label: btn-prem-1
      content_filename: '{{series_name}} - {{series_id|lower}}'
    no_entries_ok: yes
    find:
      path: "/Users/tubedogg/Torrents/btn-prem"
      mask: '*.torrent'
    accept_all: yes
    #move:
    #  to: "/Users/tubedogg/Torrents/_done"


### BTN DOWNLOADS ######################################################

  # downloads are processed through aria2
  downloads_btn:
    template: 
      # if aria2 is not running, it will cause the task to abort, leaving the entries in deluge alone so I can
      # easily tell what has actually been fed to aria2
      - download_priorities
      - deluge_connect
      - prowl_master
    no_entries_ok: yes
    set:
      event: Deluge to aria2
      pre_desc: 'Now downloading: BTN'
      label: btn-2
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: btn-1
        state: seeding
    aria2:
      uri: 'ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/btn/{{filename}}'
      server: localhost
      port: 6800
      aria_config:
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none
        dir: "/Volumes/Timon/TVS"
      do: add-new
      exclude_samples: yes
      exclude_non_content: yes
      parse_filename: yes
      rename_content_files: yes
      content_is_episodes: yes
      rename_template: '{{series_name}} - {{series_id|lower()}}'
    # if these are not disabled, it will reject everything due to
    # already having seen it when added to deluge originally. yes this
    # is a hack-ish workaround
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes

  downloads_btn-prem:
    template:
      - deluge_connect
      - download_priorities
      - prowl_master
    no_entries_ok: yes
    set:
      event: Deluge to aria2
      pre_desc: 'Now downloading: BTN (premieres)'
      label: btn-prem-2
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: btn-prem-1
        state: seeding
    aria2:
      uri: 'ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/btn-prem/{{filename}}'
      server: localhost
      port: 6800
      aria_config:
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none
        dir: "/Volumes/Timon/PremieresS"
      do: add-new
      exclude_samples: yes
      exclude_non_content: yes
      parse_filename: yes
      rename_content_files: yes
      content_is_episodes: yes
      rename_template: '{{series_name}} - {{series_id|lower()}}'
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes


### BTN CLEANUP ########################################################

  # the theory here is to get a list of torrents in btn-2 (my "is down-
  # loading" label in deluge), match against what's in aria2, and remove
  # anything that's done from aria2, and switch the label and path in
  # deluge. in reality it switches the settings in deluge regardless of
  # status in aria2, because aria2 is only an output plugin right now.
  # TODO: make aria2 an input plugin too
  cleanup_downloads_btn:
    manual: yes
    template:
      - deluge_connect
      - cleanup_priorities
    set:
      path: /media/sdh1/home/tubedogg/tor/3/btn
      label: btn-3
    disable_builtins: [seen_info_hash, seen]
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: btn-2
        state: seeding
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed

  cleanup_downloads_btn-prem:
    manual: yes
    template:
      - deluge_connect
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      path: /media/sdh1/home/tubedogg/tor/3/btn-prem
      label: btn-prem-3
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: btn-prem-2
        state: seeding
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed


########################################################################
################### TV/TVT #############################################
########################################################################

### TVT TORRENT WATCHDIR ###############################################

  # same as for BTN
  watchdir_tvt:
    template:
      - deluge_connect
      - prowl_master
    no_entries_ok: yes
    set:
      event: Watch to Deluge
      pre_desc: 'Now leeching: TVT'
      path: /media/sdh1/home/tubedogg/tor/1/tvt
      movedone: /media/sdh1/home/tubedogg/tor/2/tvt
      label: tvt-1
      content_filename: '{{series_name}} - {{series_id|lower}}'
    find:
      path: "/Users/tubedogg/Torrents/tvt"
      mask: '*.torrent'
    all_series: yes
    #move:
    #  to: "/Users/tubedogg/Torrents/_done"


### TVT DOWNLOADS ######################################################

  # same as for BTN
  downloads_tvt:
    template: 
      - download_priorities
      - deluge_connect
      - prowl_master
    no_entries_ok: yes
    set:
      event: Deluge to aria2
      pre_desc: 'Now downloading: TVT'
      label: tvt-2
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvt-1
        state: seeding
    aria2:
      uri: 'ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/tvt/{{filename}}'
      server: localhost
      port: 6800
      aria_config:
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none
        dir: "/Volumes/Timon/TVS"
      do: add-new
      exclude_samples: yes
      exclude_non_content: yes
      parse_filename: yes
      rename_content_files: yes
      content_is_episodes: yes
      rename_template: '{{series_name}} - {{series_id|lower()}}'
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes


### TVT CLEANUP ########################################################

  # same as for BTN
  cleanup_downloads_tvt:
    manual: yes
    template:
      - deluge_connect
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      path: /media/sdh1/home/tubedogg/tor/3/tvt
      label: tvt-3
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvt-2
        state: seeding
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed


########################################################################
################### TV/TVV #############################################
########################################################################

### TVV TORRENT WATCHDIR ###############################################

  # same as for BTN
  watchdir_tvv:
    template:
      - deluge_connect
      - prowl_master
    no_entries_ok: yes
    set:
      event: Watch to Deluge
      pre_desc: 'Now leeching: TVV'
      path: /media/sdh1/home/tubedogg/tor/1/tvv
      movedone: /media/sdh1/home/tubedogg/tor/2/tvv
      label: tvv-1
      content_filename: '{{series_name}} - {{series_id|lower}}'
    find:
      path: "/Users/tubedogg/Torrents/tvv"
      mask: '*.torrent'
    all_series: yes
    #move:
    #  to: "/Users/tubedogg/Torrents/_done"


### TVV DOWNLOADS ######################################################

  # same as for BTN
  downloads_tvv:
    template:
      - deluge_connect
      - download_priorities
      - prowl_master
    no_entries_ok: yes
    set:
      event: Deluge to aria2
      pre_desc: 'Now downloading: TVV'
      label: tvv-2
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvv-1
        state: seeding
    aria2:
      uri: 'ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/tvv/{{filename}}'
      server: localhost
      port: 6800
      aria_config:
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none
        dir: "/Volumes/Timon/TVS"
      do: add-new
      exclude_samples: yes
      exclude_non_content: yes
      parse_filename: yes
      rename_content_files: yes
      content_is_episodes: yes
      rename_template: '{{series_name}} - {{series_id|lower()}}'
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes


### TVV CLEANUP ########################################################

  # same as for BTN
  cleanup_downloads_tvv:
    manual: yes
    template:
      - deluge_connect
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      path: /media/sdh1/home/tubedogg/tor/3/tvv
      label: tvv-3
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvv-2
        state: seeding
    accept_all: yes
    aria2:
      do: remove-completed
      server: localhost
      port: 6800


########################################################################
################## MOVIES/TC ###########################################
########################################################################

### TC RSS #############################################################

  # filter the TC RSS feed against movies in my movie-queue
  rss_tc_movie-queue:
    # this site has a problem with its cert
    template:
      - deluge_connect_movies
      - prowl_master
    set:
      event: RSS to Deluge
      pre_desc: 'Now leeching: TC (movie queue)'
      path: /media/sdh1/home/tubedogg/tor/1/tc
      movedone: /media/sdh1/home/tubedogg/tor/2/tc
      label: tc-1
      content_filename: '{{movie_name}} ({{movie_year}})'
    verify_ssl_certificates: no
    include: [ includes/tc_rss.yml ]
    movie_queue: yes


### TC TORRENT WATCHDIR ################################################

  # similar to BTN, different content_filename though
  watchdir_tc:
    template:
      - deluge_connect_movies
      - prowl_master
    no_entries_ok: yes
    set:
      event: Watch to Deluge
      pre_desc: 'Now leeching: TC'
      path: /media/sdh1/home/tubedogg/tor/1/tc
      movedone: /media/sdh1/home/tubedogg/tor/2/tc
      label: tc-1
      content_filename: '{{movie_name}} ({{movie_year}})'
      rename_main_file_only: yes
    find:
      path: "/Users/tubedogg/Torrents/tc"
      mask: '*.torrent'
    set:
      title: '{{movie_name}} ({{movie_year}})'
    imdb_lookup: yes
    accept_all: yes
    movie_queue: yes
    #move:
    #  to: "/Users/tubedogg/Torrents/_done"


### TC DOWNLOADS #######################################################

  # similar to BTN, different rename_template and end directory though
  downloads_tc:
    template: 
      - deluge_connect
      - download_priorities
      - prowl_master
    no_entries_ok: yes
    set:
      event: Deluge to aria2
      pre_desc: 'Now downloading: TC'
      label: tc-2
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tc-1
        state: seeding
    aria2:
      server: localhost
      port: 6800
      do: add-new
      uri: ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/tc/{{filename}}
      exclude_samples: yes
      exclude_non_content: yes
      parse_filename: yes
      rename_content_files: yes
      rename_template: '{{movie_name}} ({{movie_year}})'
      aria_config:
        dir: '/Volumes/Smithee/MoviesS/'
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none


### TC CLEANUP #########################################################

  # same as for BTN
  cleanup_downloads_tc:
    manual: yes
    template:
      - deluge_connect
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      path: /media/sdh1/home/tubedogg/tor/3/tc
      label: tc-3
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed
      exclude_samples: yes
      exclude_non_content: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tc-2
        state: seeding


########################################################################
################# MOVIES/PTP ###########################################
########################################################################

### PTP RSS ############################################################

  # same as for TC
  rss_ptp_movie-queue:
    template:
      - deluge_connect_movies
      - prowl_master
    set:
      event: RSS to Deluge
      pre_desc: 'Now leeching: PTP (movie queue)'
      path: /media/sdh1/home/tubedogg/tor/1/ptp
      movedone: /media/sdh1/home/tubedogg/tor/2/ptp
      label: ptp-1
      content_filename: '{{movie_name}} ({{movie_year}})'
    include: [ includes/ptp_rss.yml ]
    movie_queue: yes


### PTP TORRENT WATCHDIR ###############################################

  # same as for TC
  watchdir_ptp:
    template:
      - deluge_connect_movies
      - prowl_master
    no_entries_ok: yes
    set:
      event: Watch to Deluge
      pre_desc: 'Now leeching: PTP'
      path: /media/sdh1/home/tubedogg/tor/1/ptp
      movedone: /media/sdh1/home/tubedogg/tor/2/ptp
      label: ptp-1
      content_filename: '{{movie_name}} ({{movie_year}})'
    find:
      path: "/Users/tubedogg/Torrents/ptp"
      mask: '*.torrent'
    set:
      title: '{{movie_name}} ({{movie_year}})'
    imdb_lookup: yes
    accept_all: yes
    movie_queue: yes
    #move:
    #  to: "/Users/tubedogg/Torrents/_done"


### PTP DOWNLOADS ######################################################

  # same as for TC
  downloads_ptp:
    template: 
      - deluge_connect
      - download_priorities
      - prowl_master
    no_entries_ok: yes
    set:
      event: Deluge to aria2
      pre_desc: 'Now downloading: PTP'
      label: ptp-2
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: ptp-1
        state: seeding
    aria2:
      server: localhost
      port: 6800
      do: add-new
      uri: 'ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/ptp/{{filename}}'
      exclude_samples: yes
      exclude_non_content: yes
      parse_filename: yes
      rename_content_files: yes
      rename_template: '{{movie_name}} ({{movie_year}})'
      aria_config:
        dir: '/Volumes/Smithee/MoviesS/'
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none


### PTP CLEANUP ########################################################

  # same as for TC
  cleanup_downloads_ptp:
    manual: yes
    template:
      - deluge_connect
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      path: /media/sdh1/home/tubedogg/tor/3/ptp
      label: ptp-3
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed
      exclude_samples: yes
      exclude_non_content: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: ptp-2
        state: seeding


########################################################################
################# MOVIE QUEUE ##########################################
########################################################################

  # read my trakt "Movies to Get" list and add to movie-queue in flexget
  movie_queue_from_trakt:
    include: [ includes/trakt_movies-to-get.yml ]
    template:
      - prowl_master
    set:
      event: Trakt to movie-queue
      pre-desc: 'Added to movie-queue:'
    accept_all: yes
    queue_movies:
      quality: 720p+ bluray


########################################################################
################# MANUAL DOWNLOADS #####################################
########################################################################

  # parse text file and pass to aria2
  parse_url_text_file:
    manual: yes
    regexp_parse:
      # File to rad
      source: "/Users/tubedogg/Torrents/URLs.txt"
      sections:
        # I use a shell script on the server to output files with the following format (used to be fed directly into
        # aria2):
        # ftp://user:pass@example.com:21/path/to/file.mkv
        #   dir=/Volumes/all_my_tv
        # This regex breaks the file into sections (essentially possible entries) based on this format
        - {regexp: 'ftp://.*\n\s\sdir=.*\n'}
      keys:
        title:
          regexps:
            # set title to the ftp line, should be unique enough
            - {regexp: '^ftp://.*/.*'}
        url:
          regexps:
            # set url to the ftp line, should be unique enough
            - {regexp: '^ftp://.*/.*'}
        aria2_dir:
          regexps:
            # regex to get the directory line
            - {regexp: '\s\sdir=.*'}
        content_files:
          # regexp for just the filename
          regexps:
            # returns just the filename portion of the ftp line
            - {regexp: '[^/]*\.[a-zA-Z0-9]{3,4}$'}
    # accept everything
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: add-new
      # URI of the file to download...use the FTP URL
      uri: '{{url}}'
      fix_year: no
      aria_config:
        # directory to store in locally is included verbatim
        dir: '{{aria2_dir|re_replace("\s\sdir=", "")}}'
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none


#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$* SCHEDULES $*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
schedules:

  # run main TV and movie RSS feeds once per day after all new shows
  # should be up
  - tasks: ['rss_btn*', 'rss_tc*', 'rss_ptp*']
    interval:
      days: 1
      at_time: 1:00 am
  # run btn one additional time per day
  - tasks: ['rss_btn*']
    interval:
      days: 1
      at_time: 5:00 pm
  # start BTN downloads every hour
  - tasks: ['down*btn*']
    interval:
      hours: 1
  # start movie downloads every 3 hours
  - tasks: ['down*tc', 'down*ptp']
    interval:
      hours: 3
  # run TVV and TVT downloads once every 3 days since the trackers
  # are not used as much (by me)
  - tasks: ['down*tv*']
    interval:
      days: 3
  # update my movie-queue every 2 days from trakt
  - tasks: ['movie_queue_from_trakt']
    interval:
      days: 2
  # run watch tasks every hour
  - tasks: ['watch*']
    interval:
      hours: 1
