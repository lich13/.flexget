#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$* TEMPLATES $*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
templates:

### DELUGE #############################################################

  deluge-connect_move:
    deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      label: '{{tracker}}-{{step}}'
      path: '/media/sdh1/home/tubedogg/tor/{{step}}/{{tracker}}'

  deluge-connect_tv:
    deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      label: '{{tracker}}-{{step}}'
      path: '/media/sdh1/home/tubedogg/tor/{{step}}/{{tracker}}'
      movedone: '/media/sdh1/home/tubedogg/tor/{{step}}/{{tracker}}'
      content_filename: '{{series_name}} - {{series_id|lower}}'

  deluge-connect_movies:
    deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      keep_container: no
      container_directory: '{{movie_name}}'
      rename_main_file_only: yes
      label: '{{tracker}}-{{step}}'
      path: '/media/sdh1/home/tubedogg/tor/{{step}}/{{tracker}}'
      movedone: '/media/sdh1/home/tubedogg/tor/{{step}}/{{tracker}}'
      content_filename: '{{movie_name}} ({{movie_year}})'


### ARIA2 ##############################################################

  aria2_tv:
    aria2:
      uri: 'ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/{{tracker}}/{{filename}}'
      server: localhost
      port: 6800
      aria_config:
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none
        dir: '/Volumes/Timon/{% if is_premiere == "y" %}PremieresS{% else %}TVS{% endif %}'
      do: add-new
      exclude_samples: yes
      exclude_non_content: yes
      parse_filename: yes
      rename_content_files: yes
      content_is_episodes: yes
      rename_template: '{{series_name}} - {{series_id|lower()}}'

  aria2_movies:
    aria2:
      server: localhost
      port: 6800
      do: add-new
      uri: 'ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/{{tracker}}/{{filename}}'
      exclude_samples: yes
      exclude_non_content: yes
      parse_filename: yes
      rename_content_files: yes
      rename_template: '{{movie_name}} ({{movie_year}})'
      aria_config:
        dir: '/Volumes/Smithee/MoviesS/'
        max-connection-per-server: 4
        max-concurrent-downloads: 4
        split: 4
        file-allocation: none


### FIX PLUGIN PRIORITIES ##############################################

  download_priorities:
    # if aria2 fails, don't update deluge (higher number tasks run first)
    plugin_priority:
      from_deluge: 136
      aria2: 137

  cleanup_priorities:
    # if aria2 fails, don't update deluge (higher number tasks run first)
    plugin_priority:
      from_deluge: 136
      aria2: 137


### PROWL ##############################################################

  prowl_master:
    # ping my iPhone when certain events occur (start leeching, start
    # downloading)
    prowl:
      apikey: 1234567891234567891234567891234567891234
      application: Flexget
      event: '{{event}}'
      description: '{% if tracker is defined %}{{tracker|upper}}{% endif %}{% if extra_desc is defined %} {{extra_desc}}{% endif %}: {% if series_name is defined %}{{series_name}}{% if series_id is defined %} - {{series_id}}{% endif %}{% elif movie_name is defined %}{{movie_name}}{% if movie_year is defined %} ({{movie_year}}){% endif %}{% elif title is defined %}{{title}}{% endif %}'


### MOVE TORRENT FILES #################################################

  move_watch_torrents:
    # move files from local watch directories once added to remote
    # Deluge
    set:
      - filename: '{{title}}'
    move:
      move_to: '/Users/tubedogg/Torrents/_done'


### TRAKT LISTS ########################################################

  trakt_input_premieres:
    # upcoming shows i want to be sure to grab
    configure_series:
      from:
        trakt_list:
          username: trakt_username
          password: trakt_password
          apikey: 12345678912345678912345678912345
          custom: premieres

  trakt_remove_premieres:
    # remove shows once premiere is grabbed
    trakt_remove:
      username: trakt_username
      password: trakt_password
      apikey: 12345678912345678912345678912345
      list: premieres

  trakt_input_shows-i-watch:
    # shows i currently watch
    configure_series:
      from:
        trakt_list:
          username: trakt_username
          password: trakt_password
          apikey: 12345678912345678912345678912345
          custom: shows i watch

  trakt_input_movies-to-get:
    # movies i want to see
    trakt_list:
      username: trakt_username
      password: trakt_password
      apikey: 12345678912345678912345678912345
      custom: movies to get

  trakt_remove_movies:
    # remove movies once added to movie-queue
    trakt_remove:
      username: trakt_username
      password: trakt_password
      apikey: 12345678912345678912345678912345
      list: movies to get


#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$* TASKS $*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
tasks:

########################################################################
################### TV/BTN #############################################
########################################################################

### BTN RSS ############################################################
  rss_btn_my-shows:
    # my list of active shows
    include:
      #- shows.yml
      - includes/btn_rss_720p-mkv.yml
    template:
      - deluge-connect_tv
      - prowl_master
      - trakt_input_shows-i-watch
    set:
      # these are used in the prowl_master template in the event and description fields, respectively
      - tracker: btn
      - step: '1'
      - event: RSS to Deluge
      - extra_desc: '(my shows):'

  rss_btn_other-shows:
    # misc shows not on my main list, but that I want to catch
    include:
      - misc-shows.yml
      - includes/btn_rss_720p-mkv.yml
    template:
      - deluge-connect_tv
      - prowl_master
    set:
      - tracker: btn
      - step: '1'
      - event: RSS to deluge
      - extra_desc: '(other shows)'

  rss_btn_my-premieres:
    # premieres I am waiting for, based on my Trakt list premieres,
    # matching against the BTN MKV 720p feed
    include:
      - includes/btn_rss_720p-mkv.yml
    template:
      - deluge-connect_tv
      - prowl_master
      - trakt_input_premieres
      - trakt_remove_premieres
    set:
      - tracker: btn
      - step: '1'
      - event: RSS to Deluge
      - extra_desc: '(my premieres)'
    # if I used series_premiere: yes here, it would match every S01E01
    # in the feed and wouldn't even check against my list...bug or
    # feature? instead, check for S01E01 manually
    if:
      - series_id != "S01E01": reject

  rss_btn_all-premieres:
    # all premieres that come across, except for certain categories/
    # networks, matching against the BTN MKV 720p feed
    include:
      - includes/btn_rss_720p-mkv.yml
    template:
      - deluge-connect_tv
      - prowl_master
    series_premiere:
      allow_teasers: no
    set:
      - tracker: btn
      - step: '1'
      - event: RSS to Deluge
      - extra_desc: '(all premieres)'
    # here I can use series_premiere because I do want everything, and
    # i'm filtering the output from there
    trakt_lookup: yes
    # if these fields aren't present, reject, because i can't filter for
    # them
    require_field:
      - trakt_series_genres
      - trakt_series_network
    if:
      # if it didn't start this year, it's not really new. if it's already ended, i don't want to see it
      - trakt_series_year < 2014 or trakt_series_status == 'Ended': reject
    regexp:
      reject:
        - talk show: {from: trakt_series_genres}
        - game show: {from: trakt_series_genres}
        - reality: {from: trakt_series_genres}
        - children: {from: trakt_series_genres}
        - hallmark channel: {from: trakt_series_network}
        # ^ *shudders*
        - bravo: {from: trakt_series_network}
        - lifetime( movie)?: {from: trakt_series_network}


### BTN TORRENT WATCHDIR ###############################################

  # easy way to upload torrents I manually download, from specific
  # folders, and still get all the magic benefits of flexget
  watchdir_btn-eps:
    template:
      - deluge-connect_tv
      - prowl_master
      - move_watch_torrents
    set:
      - tracker: btn
      - step: '1'
      - event: Watch to Deluge
      - extra_desc: '({% if series_id == "S01E01" %}premieres{% else %}eps{% endif %})'
    no_entries_ok: yes
    find:
      path: "/Users/tubedogg/Torrents/btn"
      mask: '*.torrent'
    all_series: yes

  watchdir_btn-seasons:
    template:
      - deluge-connect_tv
      - prowl_master
      - move_watch_torrents
    set:
      - tracker: btn
      - step: '1'
      - event: Watch to Deluge
      - extra_desc: '(seasons)'
    no_entries_ok: yes
    find:
      path: "/Users/tubedogg/Torrents/btn"
      mask: '*.torrent'
    accept_all: yes


### BTN DOWNLOADS ######################################################

  # downloads are processed through aria2
  downloads_btn:
    template: 
      # if aria2 is not running, it will cause the task to abort, leaving the entries in deluge alone so I can
      # easily tell what has actually been fed to aria2
      - download_priorities
      - deluge-connect_move
      - prowl_master
      - aria2_tv
    no_entries_ok: yes
    accept_all: yes
    set:
      - tracker: btn
      - step: '2'
      - event: Deluge to aria2
      - is_premiere: '{% if title|re_search("[Ss]01[Ee]01")|lower == "s01e01" %}y{% else %}n{% endif %}'
      - extra_desc: '{% if is_premiere == "y" %}(premieres){% endif %}'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: btn-1
        state: seeding
    # if these are not disabled, it will reject everything due to
    # already having seen it when added to deluge originally. yes this
    # is a hack-ish workaround
    disable_builtins: [seen_info_hash, seen]


### BTN CLEANUP ########################################################

  # the theory here is to get a list of torrents in btn-2 (my "is down-
  # loading" label in deluge), match against what's in aria2, and remove
  # anything that's done from aria2, and switch the label and path in
  # deluge. in reality it switches the settings in deluge regardless of
  # status in aria2, because aria2 is only an output plugin right now.
  # TODO: make aria2 an input plugin too
  cleanup_downloads_btn:
    manual: yes
    template:
      - deluge-connect_move
      - cleanup_priorities
    set:
      - tracker: btn
      - step: '3'
    disable_builtins: [seen_info_hash, seen]
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: btn-2
        state: seeding
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed


########################################################################
################### TV/TVT #############################################
########################################################################

### TVT TORRENT WATCHDIR ###############################################

  # same as for BTN
  watchdir_tvt:
    template:
      - deluge-connect_tv
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    set:
      - tracker: tvt
      - step: '1'
      - event: Watch to Deluge
    find:
      path: "/Users/tubedogg/Torrents/tvt"
      mask: '*.torrent'
    all_series: yes


### TVT DOWNLOADS ######################################################

  # same as for BTN
  downloads_tvt:
    template: 
      - download_priorities
      - deluge-connect_move
      - prowl_master
      - aria2_tv
    no_entries_ok: yes
    set:
      - tracker: tvt
      - step: '2'
      - event: Deluge to aria2
      - is_premiere: '{% if title|re_search("[Ss]01[Ee]01")|lower == "s01e01" %}y{% else %}n{% endif %}'
      - extra_desc: '{% if is_premiere == "y" %}(premieres){% endif %}'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvt-1
        state: seeding
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes


### TVT CLEANUP ########################################################

  # same as for BTN
  cleanup_downloads_tvt:
    manual: yes
    template:
      - deluge-connect_move
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      - tracker: tvt
      - step: '3'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvt-2
        state: seeding
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed


########################################################################
################### TV/TVV #############################################
########################################################################

### TVV TORRENT WATCHDIR ###############################################

  # same as for BTN
  watchdir_tvv:
    template:
      - deluge-connect_tv
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    set:
      - tracker: tvv
      - step: '1'
      - event: Watch to Deluge
    find:
      path: "/Users/tubedogg/Torrents/tvv"
      mask: '*.torrent'
    all_series: yes


### TVV DOWNLOADS ######################################################

  # same as for BTN
  downloads_tvv:
    template:
      - deluge-connect_move
      - download_priorities
      - prowl_master
      - aria2_tv
    no_entries_ok: yes
    set:
      - tracker: tvv
      - step: '2'
      - event: Deluge to aria2
      - is_premiere: '{% if title|re_search("[Ss]01[Ee]01")|lower == "s01e01" %}y{% else %}n{% endif %}'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvv-1
        state: seeding
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes


### TVV CLEANUP ########################################################

  # same as for BTN
  cleanup_downloads_tvv:
    manual: yes
    template:
      - deluge-connect_move
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      - tracker: tvv
      - step: '3'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvv-2
        state: seeding
    accept_all: yes
    aria2:
      do: remove-completed
      server: localhost
      port: 6800


########################################################################
################### TV/TVC #############################################
########################################################################

### TVC TORRENT WATCHDIR ###############################################

  # same as for BTN
  watchdir_tvc:
    template:
      - deluge-connect_tv
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    set:
      - tracker: tvc
      - step: '1'
      - event: Watch to Deluge
    find:
      path: "/Users/tubedogg/Torrents/tvc"
      mask: '*.torrent'
    all_series: yes


### TVC DOWNLOADS ######################################################

  # same as for BTN
  downloads_tvc:
    template: 
      - download_priorities
      - deluge-connect_move
      - prowl_master
      - aria2_tv
    no_entries_ok: yes
    accept_all: yes
    set:
      - tracker: tvc
      - step: '2'
      - event: Deluge to aria2
      - is_premiere: '{% if title|re_search("[Ss]01[Ee]01")|lower == "s01e01" %}y{% else %}n{% endif %}'
      - extra_desc: '{% if is_premiere == "y" %}(premieres){% endif %}'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: 'tvc-1'
        state: seeding
    disable_builtins: [seen_info_hash, seen]


### TVT CLEANUP ########################################################

  # same as for BTN
  cleanup_downloads_tvc:
    manual: yes
    template:
      - deluge-connect_move
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      - tracker: tvc
      - step: '3'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tvc-2
        state: seeding
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed


########################################################################
################### TV/TEBZ ############################################
########################################################################

### TEBZ TORRENT WATCHDIR ##############################################

  # same as for BTN
  watchdir_tebz:
    template:
      - deluge-connect_tv
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    set:
      - tracker: tebz
      - step: '1'
      - event: Watch to Deluge
    find:
      path: "/Users/tubedogg/Torrents/tebz"
      mask: '*.torrent'
    all_series: yes


### TEBZ DOWNLOADS #####################################################

  # same as for BTN
  downloads_tebz:
    template: 
      - download_priorities
      - deluge-connect_move
      - prowl_master
      - aria2_tv
    no_entries_ok: yes
    accept_all: yes
    set:
      - tracker: tebz
      - step: '2'
      - event: Deluge to aria2
      - is_premiere: '{% if title|re_search("[Ss]01[Ee]01")|lower == "s01e01" %}y{% else %}n{% endif %}'
      - extra_desc: '{% if is_premiere == "y" %}(premieres){% endif %}'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tebz-1
        state: seeding
    disable_builtins: [seen_info_hash, seen]


### TEBZ CLEANUP #######################################################

  # same as for BTN
  cleanup_downloads_tebz:
    manual: yes
    template:
      - deluge-connect_move
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes
    set:
      - tracker: 'tebz'
      - step: '3'
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tebz-2
        state: seeding
    aria2:
      server: localhost
      port: 6800
      do: remove-completed


########################################################################
################# TV&DOCS/SHD ##########################################
########################################################################

### SHD TORRENT WATCHDIR ###############################################

  watchdir_shd:
    template:
      - prowl_master
      - move_watch_torrents
      - deluge-connect_move
    no_entries_ok: yes
    # files from SHD have one of four unique filename structures
    set:
      - tracker: shd
      - step: '1'
    regexp:
      accept:
        # if it contains a series_id already, it's an episode
        - (.*)[Ss]\d\d?[Ee]\d\d(.*):
            set:
              - event: Watch to Deluge
              - extra_desc: '(eps)'
              - movedone: /media/sdh1/home/tubedogg/tor/2/shd
              - series_name: '{{title|re_replace(" - (.*)$","")|replace("."," ")}}'
              - series_id: '{{title|re_replace("(.*)([Ss]\\d\\d?[Ee]\\d\\d)(.*)","\\2")|lower}}'
              - title: '{{series_name}} - {{series_id}}'
              - content_filename:
                  value: '{{series_name}} - {{series_id|lower}}'
                  render: no
        # if it contains a network name, it's a "oneshot" documentary that originally aired on that channel
        - ^(National\.Geographic|History|Animal\.Planet|TLC|Discovery|Science)\.?(Channel)? - (.*):
            set:
              - event: Watch to Deluge
              - extra_desc: '(oneshot)'
              - movedone: /media/sdh1/home/tubedogg/tor/2/shd
              - series_name: '{{title|re_replace("((National\\.Geographic|History|Animal\\.Planet|TLC|Discovery|Science)\\.?(Channel)?) - (.*)","\\1")|replace(".", " ")}}'
              - episode_name: '{{title|re_replace("^(.*) - (.*) - (\\d\\d\\d\\d)(.*)", "\\2 (\\3)")|replace("."," ")}}'
              - title: '{{series_name}} - {{episode_name}}'
              - content_filename:
                  value: '{{series_name}}/{{episode_name}}'
                  render: no
        # if it contains documentary, it's what it says but not from the above networks
        - ^Documentary\s-(.*):
            set:
              - event: Watch to Deluge
              - extra_desc: '(doc)'
              - movedone: /media/sdh1/home/tubedogg/tor/2/shd
              - movie_name: '{{title|re_replace("^Documentary - (.*) - (.*)$", "\\1")}}'
              - movie_year: '{{title|re_replace("^Documentary - (.*) - (\\d\\d\\d\\d)(.*)$", "\\2")}}'
              - title: '{{movie_name}} ({{movie_year}})'
              - content_filename:
                  value: '{{movie_name}} ({{movie_year}})'
                  render: no
        # it contains Season #, it's a season of a tv show
        - (.*)[Ss]eason\.\d\d?(.*):
            set:
              - event: Watch to Deluge
              - extra_desc: '(season)'
              - movedone: /media/sdh1/home/tubedogg/tor/2/shd
              - series_name: '{{title|re_replace(" - (.*)", "")|replace("."," ")}}'
              - season: '{{title|re_replace("^(.*) - [Ss]eason\\.(\\d\\d?) - (.*)", "\\2")}}'
              - title: '{{series_name}} - Season {{season}}'
              - container_directory:
                  render: no
                  value: '{{series_name}} - Season {{season}}'
              - content_filename:
                  render: no
                  value: '{{series_name}} - {{series_id|lower}}'
    find:
      path: "/Users/tubedogg/Torrents/shd"
      mask: '*.torrent'


########################################################################
################## MOVIES/TC ###########################################
########################################################################

### TC RSS #############################################################

  # filter the TC RSS feed against movies in my movie-queue
  rss_tc_movie-queue:
    # this site has a problem with its cert
    template:
      - deluge-connect_movies
      - prowl_master
    set:
      - tracker: tc
      - step: '1'
      - event: RSS to Deluge
      - extra_desc: '(movie queue)'
    verify_ssl_certificates: no
    include: [ includes/tc_rss.yml ]
    movie_queue: yes


### TC TORRENT WATCHDIR ################################################

  # similar to BTN, different content_filename though
  watchdir_tc:
    template:
      - deluge-connect_movies
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    set:
      - tracker: tc
      - step: '1'
      - title: '{{movie_name}} ({{movie_year}})'
      - event: Watch to Deluge
      - extra_desc: '(movie queue)'
    find:
      path: "/Users/tubedogg/Torrents/tc"
      mask: '*.torrent'
    imdb_lookup: yes
    accept_all: yes
    movie_queue: yes


### TC DOWNLOADS #######################################################

  # similar to BTN, different rename_template and end directory though
  downloads_tc:
    template: 
      - deluge-connect_move
      - download_priorities
      - prowl_master
      - aria2_movies
    no_entries_ok: yes
    accept_all: yes
    set:
      - tracker: tc
      - step: '2'
      - event: Deluge to aria2
    disable_builtins: [seen_info_hash, seen]
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tc-1
        state: seeding


### TC CLEANUP #########################################################

  # same as for BTN
  cleanup_downloads_tc:
    manual: yes
    template:
      - deluge-connect_move
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      - tracker: tc
      - step: '3'
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed
      exclude_samples: yes
      exclude_non_content: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: tc-2
        state: seeding


########################################################################
################# MOVIES/PTP ###########################################
########################################################################

### PTP RSS ############################################################

  # same as for TC
  rss_ptp_movie-queue:
    template:
      - deluge-connect_movies
      - prowl_master
    set:
      - tracker: ptp
      - step: '1'
      - event: RSS to Deluge
      - extra_desc: '(movie queue)'
    include: [ includes/ptp_rss.yml ]
    movie_queue: yes


### PTP TORRENT WATCHDIR ###############################################

  # same as for TC
  watchdir_ptp:
    template:
      - deluge-connect_movies
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    set:
      - tracker: ptp
      - step: '1'
      - title: '{{movie_name}} ({{movie_year}})'
      - event: 'Watch to Deluge'
    find:
      path: "/Users/tubedogg/Torrents/ptp"
      mask: '*.torrent'
    imdb_lookup: yes
    accept_all: yes
    movie_queue: yes


### PTP DOWNLOADS ######################################################

  # same as for TC
  downloads_ptp:
    template: 
      - deluge-connect_move
      - download_priorities
      - prowl_master
      - aria2_movies
    no_entries_ok: yes
    set:
      - tracker: ptp
      - step: '2'
      - event: Deluge to aria2
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: ptp-1
        state: seeding


### PTP CLEANUP ########################################################

  # same as for TC
  cleanup_downloads_ptp:
    manual: yes
    template:
      - deluge-connect_move
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      - tracker: ptp
      - step: '3'
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed
      exclude_samples: yes
      exclude_non_content: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: ptp-2
        state: seeding


########################################################################
################# MUSIC/WHATCD #########################################
########################################################################

### WHATCD TORRENT WATCHDIR ############################################

  watchdir_whatcd:
    template:
      - deluge-connect_move
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    accept_all: yes
    set:
      - tracker: whatcd
      - step: '1'
      - event: Watch to Deluge
      - movedone: /media/sdh1/home/tubedogg/tor/2/whatcd
    find:
      path: "/Users/tubedogg/Torrents/whatcd"
      mask: '*.torrent'


### WHATCD DOWNLOADS ###################################################

  download_whatcd:
    template:
      - deluge-connect_move
      - download_priorities
      - prowl_master
    set:
      - tracker: whatcd
      - step: '2'
      - event: Deluge to aria2
    disable_builtins: [seen_info_hash, seen]
    accept_all: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: whatcd-1
        state: seeding
    aria2:
      server: localhost
      port: 6800
      do: add-new
      uri: 'ftp://ftp_user:ftp_pass@deluge.example.com:21/tor/2/whatcd/{{filename}}'
      keep_parent_folders: yes
      exclude_non_content: no
      aria_config:
        dir: '/Volumes/Ruby/Music To Add/{{parent_folders}}'


### WHATCD CLEANUP #####################################################

  # same as for TC
  cleanup_downloads_whatcd:
    manual: yes
    template:
      - deluge-connect_move
      - cleanup_priorities
    disable_builtins: [seen_info_hash, seen]
    set:
      - tracker: whatcd
      - step: '3'
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: remove-completed
      keep_parent_folders: yes
    from_deluge:
      host: deluge.example.com
      port: 12345
      username: deluge_user
      password: deluge_pass
      filter:
        label: whatcd-2
        state: seeding


########################################################################
################# PORN/GTRU ############################################
########################################################################

### GTRU TORRENT WATCHDIR ##############################################

  # same as for TC
  watchdir_gtru:
    template:
      - deluge-connect_move
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    set:
      - tracker: gtru
      - step: '1'
      - event: Watch to Deluge
      - movedone: /media/sdh1/home/tubedogg/tor/2/gtru
    find:
      path: "/Users/tubedogg/Torrents/gtru"
      mask: '*.torrent'
    accept_all: yes


########################################################################
################# PORN/GTO #############################################
########################################################################

### GTO TORRENT WATCHDIR ###############################################

  # same as for TC
  watchdir_gto:
    template:
      - deluge-connect_move
      - prowl_master
      - move_watch_torrents
    no_entries_ok: yes
    set:
      - tracker: gto
      - step: '1'
      - event: Watch to Deluge
      - movedone: /media/sdh1/home/tubedogg/tor/2/gto
    find:
      path: "/Users/tubedogg/Torrents/gto"
      mask: '*.torrent'
    accept_all: yes


########################################################################
################# MANUAL DOWNLOADS #####################################
########################################################################

  # parse text file and pass to aria2
  parse_url_text_file:
    manual: yes
    disable_builtins: ['seen']
    regexp_parse:
      # File to rad
      source: "/Users/tubedogg/Torrents/_URLs.txt"
      sections:
        # I use a shell script on the server to output files with the following format (used to be fed directly into
        # aria2):
        # ftp://user:pass@example.com:21/path/to/file.mkv
        #   dir=/Volumes/all_my_tv
        # This regex breaks the file into sections (essentially possible entries) based on this format
        - {regexp: 'ftp://.*\n\s\sdir=.*\n'}
      keys:
        title:
          regexps:
            # set title to the ftp line, should be unique enough
            - {regexp: '^ftp://.*/.*'}
        url:
          regexps:
            # set url to the ftp line, should be unique enough
            - {regexp: '^ftp://.*/.*'}
        aria2_dir:
          regexps:
            # regex to get the directory line
            - {regexp: '\s\sdir=.*'}
        content_files:
          # regexp for just the filename
          regexps:
            # returns just the filename portion of the ftp line
            - {regexp: '[^/]*\.[a-zA-Z0-9]{3,4}$'}
    # accept everything
    accept_all: yes
    aria2:
      server: localhost
      port: 6800
      do: add-new
      # URI of the file to download...use the FTP URL
      uri: '{{url}}'
      fix_year: no
      exclude_non_content: no
      aria_config:
        # directory to store in locally is included verbatim
        dir: '{{aria2_dir|re_replace("\s\sdir=", "")}}'


########################################################################
################# MOVIE QUEUE ##########################################
########################################################################

  # read my trakt "Movies to Get" list and add to movie-queue in flexget
  movie_queue_from_trakt:
    template:
      - trakt_input_movies-to-get
    accept_all: yes
    queue_movies:
      quality: 720p bluray


########################################################################
################# TEST #################################################
########################################################################

  aria_input_test:
    from_aria2:
      status: 'waiting'


#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$* SCHEDULES $*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
#*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$##$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*$*#
schedules:

  # run main TV and movie RSS feeds once per day after all new shows
  # should be up
  - tasks: ['rss_btn*', 'rss_tc*', 'rss_ptp*']
    interval:
      days: 1
      at_time: 1:00 am
  # run btn one additional time per day
  - tasks: ['rss_btn*']
    interval:
      days: 1
      at_time: 5:00 pm
  # run watch tasks every 15 minutes
  - tasks: ['watch*']
    interval:
      minutes: 15
  # start downloads from seedbox every 30 minutes
  - tasks: ['down*btn*', 'down*tc', 'down*ptp', 'down*tv*', 'down*tebz']
    interval:
      minutes: 30
  # update my movie-queue every 2 days from trakt
  - tasks: ['movie_queue_from_trakt']
    interval:
      days: 2
